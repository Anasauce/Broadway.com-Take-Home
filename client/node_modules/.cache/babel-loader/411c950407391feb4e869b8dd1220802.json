{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anasauceda/Downloads/code-assignments-react-and-apis/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anasauceda/Downloads/code-assignments-react-and-apis/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/anasauceda/Downloads/code-assignments-react-and-apis/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anasauceda/Downloads/code-assignments-react-and-apis/src/ProfileHome.js\";\nimport React, { useEffect, useState } from \"react\"; // this will be your API endpoint\n\nimport { getFavoriteShowsByUserId } from \"\";\nexport var ProfileHome = function ProfileHome(props) {\n  var _useState = useState({\n    loading: true,\n    error: false,\n    data: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      shows = _useState2[0],\n      setShows = _useState2[1];\n\n  useEffect(function (props) {\n    var getShows =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getFavoriteShowsByUserId(props.userId);\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                results = _context.sent;\n                console.log(results);\n                setShows({\n                  lodaing: false,\n                  error: false,\n                  data: results\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getShows() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getShows();\n  }, [shows.data]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, shows.data);\n};","map":{"version":3,"sources":["/Users/anasauceda/Downloads/code-assignments-react-and-apis/src/ProfileHome.js"],"names":["React","useEffect","useState","getFavoriteShowsByUserId","ProfileHome","props","loading","error","data","shows","setShows","getShows","userId","response","json","results","console","log","lodaing"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,wBAAT,QAAyC,EAAzC;AAGA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,kBACRH,QAAQ,CAAC;AACjCI,IAAAA,OAAO,EAAE,IADwB;AAEjCC,IAAAA,KAAK,EAAE,KAF0B;AAGjCC,IAAAA,IAAI,EAAE;AAH2B,GAAD,CADA;AAAA;AAAA,MAC3BC,KAD2B;AAAA,MACpBC,QADoB;;AAOlCT,EAAAA,SAAS,CACP,UAAAI,KAAK,EAAI;AACP,QAAMM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQR,wBAAwB,CAACE,KAAK,CAACO,MAAP,CADhC;;AAAA;AACTC,gBAAAA,QADS;AAAA;AAAA,uBAEOA,QAAQ,CAACC,IAAT,EAFP;;AAAA;AAETC,gBAAAA,OAFS;AAGfC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAL,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,OAAO,EAAE,KADF;AAEPX,kBAAAA,KAAK,EAAE,KAFA;AAGPC,kBAAAA,IAAI,EAAEO;AAHC,iBAAD,CAAR;;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAARJ,QAAQ;AAAA;AAAA;AAAA,OAAd;;AAUAA,IAAAA,QAAQ;AACT,GAbM,EAcP,CAACF,KAAK,CAACD,IAAP,CAdO,CAAT;AAiBA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,KAAK,CAACD,IAAZ,CAAP;AACD,CAzBM","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// this will be your API endpoint\nimport { getFavoriteShowsByUserId } from \"\";\n\n\nexport const ProfileHome = props => {\n  const [shows, setShows] = useState({\n    loading: true,\n    error: false,\n    data: []\n  });\n\n  useEffect(\n    props => {\n      const getShows = async () => {\n        const response = await getFavoriteShowsByUserId(props.userId);\n        const results = await response.json();\n        console.log(results);\n        setShows({\n          lodaing: false,\n          error: false,\n          data: results\n        });\n      };\n      getShows();\n    },\n    [shows.data]\n  );\n\n  return <div>{shows.data}</div>;\n};\n"]},"metadata":{},"sourceType":"module"}